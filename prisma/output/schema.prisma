generator client {
  provider = "prisma-client-js"
  output   = "./output"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Member {
  id        String @id @default(uuid())
  name      String
  role      String
  profileId String
  serverId  String

  profile  Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server   Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Profile {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  imgUrl   String @db.Text

  servers Server[]

  members Member[]

  channels Channel[]

  directMessages DirectMessage[]

  conversationsInitiaded Conversation[] @relation("senderProfile")
  conversationsRecieved  Conversation[] @relation("recieverProfile")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imgUrl     String    @db.Text
  inviteCode String    @db.Text
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  profileId  String
  profile    Profile   @relation(fields: [profileId], references: [id])
  members    Member[]
  channels   Channel[]

  @@index([profileId])
}

model Channel {
  id   String       @id @default(uuid())
  name String
  type CHANNEL_TYPE @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum CHANNEL_TYPE {
  TEXT
  AUDIO
  VIDEO
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id String @id @default(uuid())

  senderProfileId String
  senderProfile   Profile @relation("senderProfile", fields: [senderProfileId], references: [id], onDelete: Cascade)

  receiverProfileId String
  receiverProfile   Profile @relation("recieverProfile", fields: [receiverProfileId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([senderProfileId, receiverProfileId])
  @@index([senderProfileId])
  @@index([receiverProfileId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([conversationId])
}
